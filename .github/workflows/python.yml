name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  LEIBNIZ_USE_MOCKS: "true"
  CODEX_ENVIRONMENT: "true"

jobs:
  lint:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run Ruff linting
        run: |
          ruff check leibniz tests scripts
      - name: Run Ruff formatting check
        run: |
          ruff format --check leibniz tests
      - name: Run MyPy type checking
        run: |
          mypy leibniz
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run tests
        run: |
          pytest tests -v --cov=leibniz --cov-report=xml --cov-report=term-missing
      - name: Run integration tests
        run: |
          pytest tests/integration -v
      - name: Run mock tests
        run: |
          pytest tests/test_mocks.py -v
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run performance tests
        run: |
          pytest tests/performance -v --benchmark-only --benchmark-json=benchmark.json
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: false
          comment-on-alert: true
          alert-threshold: '150%'
          fail-on-alert: true
      - name: Check <200ms requirement
        run: |
          python -c "
          import json
          with open('benchmark.json') as f:
              data = json.load(f)

          for benchmark in data['benchmarks']:
              if 'query' in benchmark['name'].lower():
                  p95 = benchmark['stats']['percentiles']['95']
                  if p95 > 0.2:
                      print(f'❌ {benchmark[\"name\"]} P95: {p95*1000:.1f}ms exceeds 200ms target')
                      exit(1)
                  else:
                      print(f'✅ {benchmark[\"name\"]} P95: {p95*1000:.1f}ms')
          "
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Bandit security linter
        uses: py-actions/bandit@v1
        with:
          args: "-r leibniz -ll -x tests"
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: |
          python -m build
      - name: Check package
        run: |
          twine check dist/*
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install sphinx sphinx-autodoc-typehints
      - name: Check docstring coverage
        run: |
          echo "Docstring coverage check would go here"
      - name: Build documentation
        run: |
          echo "Documentation build would go here"
