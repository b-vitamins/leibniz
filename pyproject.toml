[tool.poetry]
name = "leibniz"
version = "0.1.0"
description = "Research intelligence system for ML literature"
authors = ["Ayan Das <bvits@riseup.net>"]
maintainers = [
    "Ayan Das <bvits@riseup.net>",
]
readme = "README.md"
license = "MIT"
repository = "https://github.com/yourusername/leibniz"
keywords = ["research", "ml-literature", "semantic-search", "knowledge-graph", "intelligence"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "0.104.1"
uvicorn = {extras = ["standard"], version = "0.24.0"}
qdrant-client = "1.7.0"
neo4j = "5.14.0"
meilisearch = "0.30.0"
redis = "5.0.0"
openai = "1.3.0"
httpx = "0.25.0"
pydantic = "2.5.0"
pydantic-settings = "2.1.0"
numpy = "1.24.0"
rich = "13.7.0"
typer = "0.9.0"

[tool.poetry.group.dev.dependencies]
pytest = "7.4.0"
pytest-asyncio = "0.21.0"
pytest-benchmark = "4.0.0"
pytest-cov = "4.1.0"
pytest-xdist = "3.3.1"
black = "23.11.0"
ruff = "0.1.6"
mypy = "1.7.0"
locust = "2.17.0"
types-redis = "4.6.0.11"
types-requests = "2.31.0.10"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "7.2.6"
sphinx-autodoc-typehints = "1.25.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
leibniz = "leibniz.cli:app"

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    "__pycache__",
    ".git",
    ".github",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    "*.egg-info",
    "data",
    "logs",
    "config/local",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "N",    # pep8-naming
    "D",    # pydocstyle
    "C90",  # mccabe complexity
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit (security)
    "BLE",  # flake8-blind-except
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "TRY",  # tryceratops
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",   # pylint
    "RUF",  # ruff-specific rules
]
ignore = [
    "E203",     # whitespace before ':'
    "E501",     # line too long (handled by black)
    "D100",     # missing docstring in public module
    "D104",     # missing docstring in public package
    "S101",     # use of assert (needed for tests)
    "PLR0913",  # too many arguments
    "TRY003",   # avoid specifying long messages outside exception class
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["D", "ANN", "S101", "PLR2004", "PLR0915"]
"scripts/*.py" = ["D", "ANN", "T201"]
"leibniz/cli/*.py" = ["T201"]  # allow print in CLI

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true

[tool.ruff.lint.flake8-import-conventions.aliases]
"numpy" = "np"
"pandas" = "pd"
"matplotlib.pyplot" = "plt"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.mypy]
python_version = "3.11"
strict = true
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
disallow_incomplete_defs = true
warn_unused_ignores = false
no_implicit_reexport = false

[[tool.mypy.overrides]]
module = ["meilisearch.*", "qdrant_client.*", "neo4j.*", "locust.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["leibniz.*"]
strict = true
ignore_errors = false
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = ["tests.*", "scripts.*"]
ignore_errors = true
warn_unused_ignores = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
addopts = """
    -v --tb=short
    --strict-markers
    --strict-config
    --cov-fail-under=80
    --cov-branch
    --cov-report=html
    --cov-report=term-missing:skip-covered
"""
markers = [
    # Test speed markers
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests that run in under 100ms",
    
    # Test type markers
    "unit: isolated unit tests",
    "integration: tests requiring multiple components",
    "functional: end-to-end functional tests",
    "performance: performance benchmark tests",
    "benchmark: performance benchmark tests",
    
    # Performance-specific markers
    "query_bench: query speed benchmarks",
    "memory_bench: memory usage benchmarks",
    "ingestion_bench: data ingestion benchmarks",
    "intelligence_bench: intelligence feature benchmarks",
    
    # Environment markers
    "requires_services: requires all services running",
    "requires_neo4j: requires Neo4j",
    "requires_qdrant: requires QDrant",
    "requires_meilisearch: requires Meilisearch",
    "requires_grobid: requires GROBID",
    "network: requires network access",
    "heavy: requires significant resources",
    
    # Priority markers
    "smoke: critical tests for smoke testing",
    "nightly: tests for nightly builds only",
    "security: security-related tests",
    "regression: regression tests for specific bugs",
]

[tool.pytest.benchmark]
disable_gc = true
min_rounds = 5
min_time = 0.000005
max_time = 1.0
calibration_precision = 10
warmup = true
warmup_iterations = 100000

[tool.coverage.run]
source = ["leibniz"]
omit = [
    "*/tests/*",
    "*/scripts/*",
    "leibniz/__init__.py",
    "leibniz/__main__.py",
    "leibniz/cli/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
precision = 2
show_missing = true
skip_covered = true

[tool.coverage.html]
directory = "htmlcov"